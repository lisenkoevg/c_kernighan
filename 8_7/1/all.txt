 1    static Header base;          /* empty list to get started */
 2    static Header *freep = NULL; /* start of free list */
      
 3    /* malloc: general-purpose storage allocator */
 4    void *malloc(unsigned nbytes) {
 5      Header *p, *prevp;
 6      Header *morecore(unsigned);
 7      unsigned nunits;
 8      nunits = (nbytes + sizeof(Header) - 1) / sizeof(Header) + 1;
 9      if ((prevp = freep) == NULL) { /* no free list yet */
10        base.s.ptr = freep = prevp = &base;
11        base.s.size = 0;
12      }
13      for (p = prevp->s.ptr;; prevp = p, p = p->s.ptr) {
14        if (p->s.size >= nunits) { /* big enough */
15          if (p->s.size == nunits) /* exactly */
16            prevp->s.ptr = p->s.ptr;
17          else { /* allocate tail end */
18            p->s.size -= nunits;
19            p += p->s.size;
20            p->s.size = nunits;
21          }
22          freep = prevp;
23          return (void *)(p + 1);
24        }
25        if (p == freep) /* wrapped around free list */
26          if ((p = morecore(nunits)) == NULL)
27            return NULL; /* none left */
28      }
29    }
  
 1    static Header *morecore(unsigned nu) {
 2      char *cp, *sbrk(int);
 3      Header *up;
 4      if (nu < NALLOC)
 5        nu = NALLOC;
 6      cp = sbrk(nu * sizeof(Header));
 7      if (cp == (char *)-1) /* no space at all */
 8        return NULL;
 9      up = (Header *)cp;
10      up->s.size = nu;
11      free((void *)(up + 1));
12      return freep;
13    }

 1    /* free: put block ap in free list */
 2    void free(void *ap) {
 3      Header *bp, *p;
 4      bp = (Header *)ap - 1; /* point to block header */
 5      for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
 6        if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
 7          break;                         /* freed block at start or end of arena */
 8      if (bp + bp->s.size == p->s.ptr) { /* join to upper nbr */
 9        bp->s.size += p->s.ptr->s.size;
10        bp->s.ptr = p->s.ptr->s.ptr;
11      } else
12        bp->s.ptr = p->s.ptr;
13      if (p + p->s.size == bp) { /* join to lower nbr */
14        p->s.size += bp->s.size;
15        p->s.ptr = bp->s.ptr;
16      } else
17        p->s.ptr = bp;
18      freep = p;
19    }
